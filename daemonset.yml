apiVersion: v1
kind: Secret
metadata:
  name: mqtt
  namespace: logs2mqtt
type: Opaque
data:
  username: dXNlcm5hbWU=   #e cho -n 'username' | base64
  password: cGFzc3dvcmQ=

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: logs2mqtt
  name: logs2mqtt
  namespace: logs2mqtt
spec:
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: logs2mqtt
  template:
    metadata:
      labels:
        app: logs2mqtt
    spec:
      initContainers:
        - name: init-perms
          image: busybox
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args:
            [
              "-c",
              "chmod -R 755 /var/log/auth.log && chown 1000:1000 /var/log/auth.log",
            ]
          securityContext:
            runAsUser: 0
            privileged: true
          volumeMounts:
            - mountPath: /var/log/auth.log
              name: auth
        - name: init-broker #rabbitmq
          image: alpine
          imagePullPolicy: Always
          command:
            [
              "sh",
              "-c",
              "for i in {1..100}; do sleep 1; if nslookup rabbitmq.rabbitmq-system.svc.cluster.local; then exit 0; fi; done; exit 1;",
            ]
      containers:
        - env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: HOST
              value: "rabbitmq.rabbitmq-system.svc.cluster.local"
            - name: MQTT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mqtt
                  key: password
            - name: MQTT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mqtt
                  key: username
            - name: PORT
              value: "1883"
          image: william1608/logs2mqtt
          imagePullPolicy: IfNotPresent
          name: logs2mqtt
          resources:
            limits:
              memory: "200Mi"
              cpu: "200m"
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            privileged: false
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - mountPath: /var/log/auth.log
              name: auth
              #readOnly: true
      restartPolicy: Always
      volumes:
        - name: auth
          hostPath:
            path: /var/log/auth.log
